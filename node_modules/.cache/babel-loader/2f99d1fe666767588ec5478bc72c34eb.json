{"ast":null,"code":"import $ from '../../shared/dom7';\nimport appRouterCheck from './app-router-check';\n\nfunction clearPreviousPages(router) {\n  appRouterCheck(router, 'clearPreviousPages');\n  var app = router.app;\n  var dynamicNavbar = router.dynamicNavbar;\n  var $pagesToRemove = router.$el.children('.page').filter(function (pageInView) {\n    if (router.currentRoute && (router.currentRoute.modal || router.currentRoute.panel)) return true;\n    return pageInView !== router.currentPageEl;\n  });\n  $pagesToRemove.each(function (pageEl) {\n    var $oldPageEl = $(pageEl);\n    var $oldNavbarEl = $(app.navbar.getElByPage($oldPageEl));\n\n    if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {\n      $oldPageEl.addClass('stacked');\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl, 'previous', undefined, {});\n      router.removePage($oldPageEl);\n\n      if (dynamicNavbar && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  });\n}\n\nfunction clearPreviousHistory() {\n  var router = this;\n  appRouterCheck(router, 'clearPreviousHistory');\n  var url = router.history[router.history.length - 1];\n  clearPreviousPages(router);\n  router.history = [url];\n  router.view.history = [url];\n  router.saveHistory();\n}\n\nexport { clearPreviousHistory }; // eslint-disable-line","map":{"version":3,"sources":["E:/Programming/React/rashi-app/node_modules/framework7/esm/modules/router/clear-previous-history.js"],"names":["$","appRouterCheck","clearPreviousPages","router","app","dynamicNavbar","$pagesToRemove","$el","children","filter","pageInView","currentRoute","modal","panel","currentPageEl","each","pageEl","$oldPageEl","$oldNavbarEl","navbar","getElByPage","params","stackPages","initialPages","indexOf","addClass","pageCallback","undefined","removePage","length","removeNavbar","clearPreviousHistory","url","history","view","saveHistory"],"mappings":"AAAA,OAAOA,CAAP,MAAc,mBAAd;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCF,EAAAA,cAAc,CAACE,MAAD,EAAS,oBAAT,CAAd;AACA,MAAIC,GAAG,GAAGD,MAAM,CAACC,GAAjB;AACA,MAAIC,aAAa,GAAGF,MAAM,CAACE,aAA3B;AACA,MAAIC,cAAc,GAAGH,MAAM,CAACI,GAAP,CAAWC,QAAX,CAAoB,OAApB,EAA6BC,MAA7B,CAAoC,UAAUC,UAAV,EAAsB;AAC7E,QAAIP,MAAM,CAACQ,YAAP,KAAwBR,MAAM,CAACQ,YAAP,CAAoBC,KAApB,IAA6BT,MAAM,CAACQ,YAAP,CAAoBE,KAAzE,CAAJ,EAAqF,OAAO,IAAP;AACrF,WAAOH,UAAU,KAAKP,MAAM,CAACW,aAA7B;AACD,GAHoB,CAArB;AAIAR,EAAAA,cAAc,CAACS,IAAf,CAAoB,UAAUC,MAAV,EAAkB;AACpC,QAAIC,UAAU,GAAGjB,CAAC,CAACgB,MAAD,CAAlB;AACA,QAAIE,YAAY,GAAGlB,CAAC,CAACI,GAAG,CAACe,MAAJ,CAAWC,WAAX,CAAuBH,UAAvB,CAAD,CAApB;;AAEA,QAAId,MAAM,CAACkB,MAAP,CAAcC,UAAd,IAA4BnB,MAAM,CAACoB,YAAP,CAAoBC,OAApB,CAA4BP,UAAU,CAAC,CAAD,CAAtC,KAA8C,CAA9E,EAAiF;AAC/EA,MAAAA,UAAU,CAACQ,QAAX,CAAoB,SAApB;;AAEA,UAAIpB,aAAJ,EAAmB;AACjBa,QAAAA,YAAY,CAACO,QAAb,CAAsB,SAAtB;AACD;AACF,KAND,MAMO;AACL;AACAtB,MAAAA,MAAM,CAACuB,YAAP,CAAoB,cAApB,EAAoCT,UAApC,EAAgDC,YAAhD,EAA8D,UAA9D,EAA0ES,SAA1E,EAAqF,EAArF;AACAxB,MAAAA,MAAM,CAACyB,UAAP,CAAkBX,UAAlB;;AAEA,UAAIZ,aAAa,IAAIa,YAAY,CAACW,MAAlC,EAA0C;AACxC1B,QAAAA,MAAM,CAAC2B,YAAP,CAAoBZ,YAApB;AACD;AACF;AACF,GAnBD;AAoBD;;AAED,SAASa,oBAAT,GAAgC;AAC9B,MAAI5B,MAAM,GAAG,IAAb;AACAF,EAAAA,cAAc,CAACE,MAAD,EAAS,sBAAT,CAAd;AACA,MAAI6B,GAAG,GAAG7B,MAAM,CAAC8B,OAAP,CAAe9B,MAAM,CAAC8B,OAAP,CAAeJ,MAAf,GAAwB,CAAvC,CAAV;AACA3B,EAAAA,kBAAkB,CAACC,MAAD,CAAlB;AACAA,EAAAA,MAAM,CAAC8B,OAAP,GAAiB,CAACD,GAAD,CAAjB;AACA7B,EAAAA,MAAM,CAAC+B,IAAP,CAAYD,OAAZ,GAAsB,CAACD,GAAD,CAAtB;AACA7B,EAAAA,MAAM,CAACgC,WAAP;AACD;;AAED,SAASJ,oBAAT,G,CAAiC","sourcesContent":["import $ from '../../shared/dom7';\nimport appRouterCheck from './app-router-check';\n\nfunction clearPreviousPages(router) {\n  appRouterCheck(router, 'clearPreviousPages');\n  var app = router.app;\n  var dynamicNavbar = router.dynamicNavbar;\n  var $pagesToRemove = router.$el.children('.page').filter(function (pageInView) {\n    if (router.currentRoute && (router.currentRoute.modal || router.currentRoute.panel)) return true;\n    return pageInView !== router.currentPageEl;\n  });\n  $pagesToRemove.each(function (pageEl) {\n    var $oldPageEl = $(pageEl);\n    var $oldNavbarEl = $(app.navbar.getElByPage($oldPageEl));\n\n    if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {\n      $oldPageEl.addClass('stacked');\n\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl, 'previous', undefined, {});\n      router.removePage($oldPageEl);\n\n      if (dynamicNavbar && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  });\n}\n\nfunction clearPreviousHistory() {\n  var router = this;\n  appRouterCheck(router, 'clearPreviousHistory');\n  var url = router.history[router.history.length - 1];\n  clearPreviousPages(router);\n  router.history = [url];\n  router.view.history = [url];\n  router.saveHistory();\n}\n\nexport { clearPreviousHistory }; // eslint-disable-line"]},"metadata":{},"sourceType":"module"}