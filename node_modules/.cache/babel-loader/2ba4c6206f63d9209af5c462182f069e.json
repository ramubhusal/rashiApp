{"ast":null,"code":"import { getWindow } from 'ssr-window';\nimport { extend } from '../../shared/utils';\nvar SW = {\n  registrations: [],\n  register: function register(path, scope) {\n    var app = this;\n    var window = getWindow();\n\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      app.serviceWorker.container.register(path, scope ? {\n        scope: scope\n      } : {}).then(function (reg) {\n        SW.registrations.push(reg);\n        app.emit('serviceWorkerRegisterSuccess', reg);\n        resolve(reg);\n      }).catch(function (error) {\n        app.emit('serviceWorkerRegisterError', error);\n        reject(error);\n      });\n    });\n  },\n  unregister: function unregister(registration) {\n    var app = this;\n    var window = getWindow();\n\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n\n    var registrations;\n    if (!registration) registrations = SW.registrations;else if (Array.isArray(registration)) registrations = registration;else registrations = [registration];\n    return Promise.all(registrations.map(function (reg) {\n      return new Promise(function (resolve, reject) {\n        reg.unregister().then(function () {\n          if (SW.registrations.indexOf(reg) >= 0) {\n            SW.registrations.splice(SW.registrations.indexOf(reg), 1);\n          }\n\n          app.emit('serviceWorkerUnregisterSuccess', reg);\n          resolve();\n        }).catch(function (error) {\n          app.emit('serviceWorkerUnregisterError', reg, error);\n          reject(error);\n        });\n      });\n    }));\n  }\n};\nexport default {\n  name: 'sw',\n  params: {\n    serviceWorker: {\n      path: undefined,\n      scope: undefined\n    }\n  },\n  create: function create() {\n    var app = this;\n    var window = getWindow();\n    extend(app, {\n      serviceWorker: {\n        container: 'serviceWorker' in window.navigator ? window.navigator.serviceWorker : undefined,\n        registrations: SW.registrations,\n        register: SW.register.bind(app),\n        unregister: SW.unregister.bind(app)\n      }\n    });\n  },\n  on: {\n    init: function init() {\n      var window = getWindow();\n      if (!('serviceWorker' in window.navigator)) return;\n      var app = this;\n      if (app.device.cordova || window.Capacitor && window.Capacitor.isNative) return;\n      if (!app.serviceWorker.container) return;\n      var paths = app.params.serviceWorker.path;\n      var scope = app.params.serviceWorker.scope;\n      if (!paths || Array.isArray(paths) && !paths.length) return;\n      var toRegister = Array.isArray(paths) ? paths : [paths];\n      toRegister.forEach(function (path) {\n        app.serviceWorker.register(path, scope);\n      });\n    }\n  }\n};","map":{"version":3,"sources":["E:/Programming/React/rashiApp/node_modules/framework7/esm/modules/service-worker/service-worker.js"],"names":["getWindow","extend","SW","registrations","register","path","scope","app","window","navigator","serviceWorker","container","Promise","resolve","reject","Error","then","reg","push","emit","catch","error","unregister","registration","Array","isArray","all","map","indexOf","splice","name","params","undefined","create","bind","on","init","device","cordova","Capacitor","isNative","paths","length","toRegister","forEach"],"mappings":"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","sourcesContent":["import { getWindow } from 'ssr-window';\nimport { extend } from '../../shared/utils';\nvar SW = {\n  registrations: [],\n  register: function register(path, scope) {\n    var app = this;\n    var window = getWindow();\n\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      app.serviceWorker.container.register(path, scope ? {\n        scope: scope\n      } : {}).then(function (reg) {\n        SW.registrations.push(reg);\n        app.emit('serviceWorkerRegisterSuccess', reg);\n        resolve(reg);\n      }).catch(function (error) {\n        app.emit('serviceWorkerRegisterError', error);\n        reject(error);\n      });\n    });\n  },\n  unregister: function unregister(registration) {\n    var app = this;\n    var window = getWindow();\n\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n\n    var registrations;\n    if (!registration) registrations = SW.registrations;else if (Array.isArray(registration)) registrations = registration;else registrations = [registration];\n    return Promise.all(registrations.map(function (reg) {\n      return new Promise(function (resolve, reject) {\n        reg.unregister().then(function () {\n          if (SW.registrations.indexOf(reg) >= 0) {\n            SW.registrations.splice(SW.registrations.indexOf(reg), 1);\n          }\n\n          app.emit('serviceWorkerUnregisterSuccess', reg);\n          resolve();\n        }).catch(function (error) {\n          app.emit('serviceWorkerUnregisterError', reg, error);\n          reject(error);\n        });\n      });\n    }));\n  }\n};\nexport default {\n  name: 'sw',\n  params: {\n    serviceWorker: {\n      path: undefined,\n      scope: undefined\n    }\n  },\n  create: function create() {\n    var app = this;\n    var window = getWindow();\n    extend(app, {\n      serviceWorker: {\n        container: 'serviceWorker' in window.navigator ? window.navigator.serviceWorker : undefined,\n        registrations: SW.registrations,\n        register: SW.register.bind(app),\n        unregister: SW.unregister.bind(app)\n      }\n    });\n  },\n  on: {\n    init: function init() {\n      var window = getWindow();\n      if (!('serviceWorker' in window.navigator)) return;\n      var app = this;\n      if (app.device.cordova || window.Capacitor && window.Capacitor.isNative) return;\n      if (!app.serviceWorker.container) return;\n      var paths = app.params.serviceWorker.path;\n      var scope = app.params.serviceWorker.scope;\n      if (!paths || Array.isArray(paths) && !paths.length) return;\n      var toRegister = Array.isArray(paths) ? paths : [paths];\n      toRegister.forEach(function (path) {\n        app.serviceWorker.register(path, scope);\n      });\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}