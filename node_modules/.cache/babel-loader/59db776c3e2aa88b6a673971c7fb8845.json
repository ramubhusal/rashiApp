{"ast":null,"code":"/** @jsx $jsx */\nimport $jsx from '../../../shared/$jsx';\nexport default {\n  render: function render(self) {\n    var _self$params = self.params,\n        sliderLabel = _self$params.sliderLabel,\n        sliderValue = _self$params.sliderValue,\n        sliderValueEditable = _self$params.sliderValueEditable,\n        alphaLabelText = _self$params.alphaLabelText;\n    return $jsx(\"div\", {\n      class: \"color-picker-module color-picker-module-alpha-slider\"\n    }, $jsx(\"div\", {\n      class: \"color-picker-slider-wrap\"\n    }, sliderLabel && $jsx(\"div\", {\n      class: \"color-picker-slider-label\"\n    }, alphaLabelText), $jsx(\"div\", {\n      class: \"range-slider color-picker-slider color-picker-slider-alpha\"\n    }), sliderValue && $jsx(\"div\", {\n      class: \"color-picker-slider-value\"\n    }, sliderValueEditable ? $jsx(\"input\", {\n      type: \"number\",\n      step: \"0.01\",\n      min: \"0\",\n      max: \"1\",\n      class: \"color-picker-value-alpha\"\n    }) : $jsx(\"span\", {\n      class: \"color-picker-value-alpha\"\n    }))));\n  },\n  init: function init(self) {\n    self.alphaRangeSlider = self.app.range.create({\n      el: self.$el.find('.color-picker-slider-alpha'),\n      min: 0,\n      max: 1,\n      step: 0.01,\n      value: 1,\n      on: {\n        change: function change(range, value) {\n          var alpha = Math.floor(value * 100) / 100;\n          self.setValue({\n            alpha: alpha\n          });\n        }\n      }\n    });\n\n    function handleInputChange(e) {\n      var alpha = self.value.alpha;\n      var value = parseFloat(e.target.value);\n\n      if (Number.isNaN(value)) {\n        e.target.value = alpha;\n        return;\n      }\n\n      value = Math.max(0, Math.min(1, value));\n      self.setValue({\n        alpha: value\n      });\n    }\n\n    self.$el.on('change', '.color-picker-module-alpha-slider input', handleInputChange);\n\n    self.destroyAlphaSliderEvents = function destroyAlphaSliderEvents() {\n      self.$el.off('change', '.color-picker-module-alpha-slider input', handleInputChange);\n    };\n  },\n  update: function update(self) {\n    var value = self.value;\n    var _self$params2 = self.params,\n        sliderValue = _self$params2.sliderValue,\n        sliderValueEditable = _self$params2.sliderValueEditable;\n    var alpha = value.alpha;\n    self.alphaRangeSlider.value = alpha;\n    self.alphaRangeSlider.layout();\n\n    if (sliderValue && sliderValueEditable) {\n      self.$el.find('input.color-picker-value-alpha').val(alpha);\n    } else {\n      self.$el.find('span.color-picker-value-alpha').text(alpha);\n    }\n  },\n  destroy: function destroy(self) {\n    if (self.alphaRangeSlider && self.alphaRangeSlider.destroy) {\n      self.alphaRangeSlider.destroy();\n    }\n\n    delete self.alphaRangeSlider;\n    if (self.destroyAlphaSliderEvents) self.destroyAlphaSliderEvents();\n    delete self.destroyAlphaSliderEvents;\n  }\n};","map":{"version":3,"sources":["E:/Programming/React/rashiApp/node_modules/framework7/esm/components/color-picker/modules/alpha-slider.js"],"names":["$jsx","render","self","_self$params","params","sliderLabel","sliderValue","sliderValueEditable","alphaLabelText","class","type","step","min","max","init","alphaRangeSlider","app","range","create","el","$el","find","value","on","change","alpha","Math","floor","setValue","handleInputChange","e","parseFloat","target","Number","isNaN","destroyAlphaSliderEvents","off","update","_self$params2","layout","val","text","destroy"],"mappings":"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","sourcesContent":["/** @jsx $jsx */\nimport $jsx from '../../../shared/$jsx';\nexport default {\n  render: function render(self) {\n    var _self$params = self.params,\n        sliderLabel = _self$params.sliderLabel,\n        sliderValue = _self$params.sliderValue,\n        sliderValueEditable = _self$params.sliderValueEditable,\n        alphaLabelText = _self$params.alphaLabelText;\n    return $jsx(\"div\", {\n      class: \"color-picker-module color-picker-module-alpha-slider\"\n    }, $jsx(\"div\", {\n      class: \"color-picker-slider-wrap\"\n    }, sliderLabel && $jsx(\"div\", {\n      class: \"color-picker-slider-label\"\n    }, alphaLabelText), $jsx(\"div\", {\n      class: \"range-slider color-picker-slider color-picker-slider-alpha\"\n    }), sliderValue && $jsx(\"div\", {\n      class: \"color-picker-slider-value\"\n    }, sliderValueEditable ? $jsx(\"input\", {\n      type: \"number\",\n      step: \"0.01\",\n      min: \"0\",\n      max: \"1\",\n      class: \"color-picker-value-alpha\"\n    }) : $jsx(\"span\", {\n      class: \"color-picker-value-alpha\"\n    }))));\n  },\n  init: function init(self) {\n    self.alphaRangeSlider = self.app.range.create({\n      el: self.$el.find('.color-picker-slider-alpha'),\n      min: 0,\n      max: 1,\n      step: 0.01,\n      value: 1,\n      on: {\n        change: function change(range, value) {\n          var alpha = Math.floor(value * 100) / 100;\n          self.setValue({\n            alpha: alpha\n          });\n        }\n      }\n    });\n\n    function handleInputChange(e) {\n      var alpha = self.value.alpha;\n      var value = parseFloat(e.target.value);\n\n      if (Number.isNaN(value)) {\n        e.target.value = alpha;\n        return;\n      }\n\n      value = Math.max(0, Math.min(1, value));\n      self.setValue({\n        alpha: value\n      });\n    }\n\n    self.$el.on('change', '.color-picker-module-alpha-slider input', handleInputChange);\n\n    self.destroyAlphaSliderEvents = function destroyAlphaSliderEvents() {\n      self.$el.off('change', '.color-picker-module-alpha-slider input', handleInputChange);\n    };\n  },\n  update: function update(self) {\n    var value = self.value;\n    var _self$params2 = self.params,\n        sliderValue = _self$params2.sliderValue,\n        sliderValueEditable = _self$params2.sliderValueEditable;\n    var alpha = value.alpha;\n    self.alphaRangeSlider.value = alpha;\n    self.alphaRangeSlider.layout();\n\n    if (sliderValue && sliderValueEditable) {\n      self.$el.find('input.color-picker-value-alpha').val(alpha);\n    } else {\n      self.$el.find('span.color-picker-value-alpha').text(alpha);\n    }\n  },\n  destroy: function destroy(self) {\n    if (self.alphaRangeSlider && self.alphaRangeSlider.destroy) {\n      self.alphaRangeSlider.destroy();\n    }\n\n    delete self.alphaRangeSlider;\n    if (self.destroyAlphaSliderEvents) self.destroyAlphaSliderEvents();\n    delete self.destroyAlphaSliderEvents;\n  }\n};"]},"metadata":{},"sourceType":"module"}