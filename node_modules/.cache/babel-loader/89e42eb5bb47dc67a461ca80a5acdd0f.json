{"ast":null,"code":"import { extend, nextTick } from '../../shared/utils';\nimport History from '../../shared/history';\nimport asyncComponent from './async-component';\n\nfunction modalLoad(modalType, route, loadOptions, direction) {\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n\n  var router = this;\n  var app = router.app;\n  var isPanel = modalType === 'panel';\n  var modalOrPanel = isPanel ? 'panel' : 'modal';\n  var options = extend({\n    animate: router.params.animate,\n    browserHistory: true,\n    history: true,\n    on: {},\n    once: {}\n  }, loadOptions);\n  var modalParams = extend({}, route.route[modalType]);\n  var modalRoute = route.route;\n\n  var routeCallback = function routeCallback(modal, name) {\n    var on = options.on,\n        once = options.once;\n    var callback;\n\n    if (name === 'open') {\n      callback = on.modalOpen || once.modalOpen || on.panelOpen || once.panelOpen;\n    }\n\n    if (name === 'close') {\n      callback = on.modalClose || once.modalClose || on.panelClose || once.panelClose;\n    }\n\n    if (name === 'closed') {\n      callback = on.modalClosed || once.modalClosed || on.panelClosed || once.panelClosed;\n    }\n\n    if (callback) callback(modal);\n  };\n\n  function onModalLoaded() {\n    // Create Modal\n    var modal = app[modalType].create(modalParams);\n    modalRoute.modalInstance = modal;\n    var hasEl = modal.el;\n\n    function closeOnSwipeBack() {\n      modal.close();\n    }\n\n    modal.on(modalOrPanel + \"Open\", function () {\n      if (!hasEl) {\n        // Remove theme elements\n        router.removeThemeElements(modal.el); // Emit events\n\n        modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n        router.emit((!isPanel ? 'modalInit' : '') + \" \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n      }\n\n      router.once('swipeBackMove', closeOnSwipeBack);\n      routeCallback(modal, 'open');\n    });\n    modal.on(modalOrPanel + \"Close\", function () {\n      router.off('swipeBackMove', closeOnSwipeBack);\n\n      if (!modal.closeByRouter) {\n        router.back();\n      }\n\n      routeCallback(modal, 'close');\n    });\n    modal.on(modalOrPanel + \"Closed\", function () {\n      modal.$el.trigger(modalType.toLowerCase() + \":beforeremove\", route, modal);\n      modal.emit(\"\" + (!isPanel ? 'modalBeforeRemove ' : '') + modalType + \"BeforeRemove\", modal.el, route, modal);\n      var modalComponent = modal.el.f7Component;\n      routeCallback(modal, 'closed');\n\n      if (modalComponent) {\n        modalComponent.destroy();\n      }\n\n      nextTick(function () {\n        if (modalComponent || modalParams.component) {\n          router.removeModal(modal.el);\n        }\n\n        modal.destroy();\n        delete modal.route;\n        delete modalRoute.modalInstance;\n      });\n    });\n\n    if (options.route) {\n      // Update Browser History\n      if (router.params.browserHistory && options.browserHistory) {\n        History.push(router.view.id, {\n          url: options.route.url,\n          modal: modalType\n        }, (router.params.browserHistoryRoot || '') + router.params.browserHistorySeparator + options.route.url);\n      } // Set Route\n\n\n      if (options.route !== router.currentRoute) {\n        modal.route = extend(options.route, {\n          modal: modal\n        });\n        router.currentRoute = modal.route;\n      } // Update Router History\n\n\n      if (options.history && !options.reloadCurrent) {\n        router.history.push(options.route.url);\n        router.saveHistory();\n      }\n    }\n\n    if (hasEl) {\n      // Remove theme elements\n      router.removeThemeElements(modal.el); // Emit events\n\n      modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n      router.emit(modalOrPanel + \"Init \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n    } // Open\n\n\n    modal.open(options.animate === false || options.animate === true ? options.animate : undefined);\n  } // Load Modal Content\n\n\n  function loadModal(loadModalParams, loadModalOptions) {\n    // Load Modal Props\n    var url = loadModalParams.url,\n        content = loadModalParams.content,\n        component = loadModalParams.component,\n        componentUrl = loadModalParams.componentUrl; // Component/Template Callbacks\n\n    function resolve(contentEl) {\n      if (contentEl) {\n        if (typeof contentEl === 'string') {\n          modalParams.content = contentEl;\n        } else if (contentEl.f7Component) {\n          contentEl.f7Component.mount(function (componentEl) {\n            modalParams.el = componentEl;\n            app.$el.append(componentEl);\n          });\n        } else {\n          modalParams.el = contentEl;\n        }\n\n        onModalLoaded();\n      }\n    }\n\n    function reject() {\n      router.allowPageChange = true;\n      return router;\n    }\n\n    if (content) {\n      resolve(content);\n    } else if (component || componentUrl) {\n      // Load from component (F7/Vue/React/...)\n      try {\n        router.modalComponentLoader({\n          rootEl: app.el,\n          component: component,\n          componentUrl: componentUrl,\n          options: loadModalOptions,\n          resolve: resolve,\n          reject: reject\n        });\n      } catch (err) {\n        router.allowPageChange = true;\n        throw err;\n      }\n    } else if (url) {\n      // Load using XHR\n      if (router.xhrAbortController) {\n        router.xhrAbortController.abort();\n        router.xhrAbortController = false;\n      }\n\n      router.xhrRequest(url, loadModalOptions).then(function (modalContent) {\n        modalParams.content = modalContent;\n        onModalLoaded();\n      }).catch(function () {\n        router.allowPageChange = true;\n      });\n    } else {\n      onModalLoaded();\n    }\n  }\n\n  var foundLoadProp;\n  'url content component el componentUrl template'.split(' ').forEach(function (modalLoadProp) {\n    if (modalParams[modalLoadProp] && !foundLoadProp) {\n      var _loadModal;\n\n      foundLoadProp = true;\n      loadModal((_loadModal = {}, _loadModal[modalLoadProp] = modalParams[modalLoadProp], _loadModal), options);\n    }\n  });\n\n  if (!foundLoadProp && modalType === 'actions') {\n    onModalLoaded();\n  } // Async\n\n\n  function asyncResolve(resolveParams, resolveOptions) {\n    loadModal(resolveParams, extend(options, resolveOptions));\n  }\n\n  function asyncReject() {\n    router.allowPageChange = true;\n  }\n\n  if (modalParams.async) {\n    modalParams.async.call(router, {\n      router: router,\n      to: options.route,\n      from: router.currentRoute,\n      resolve: asyncResolve,\n      reject: asyncReject,\n      direction: direction,\n      app: app\n    });\n  }\n\n  if (modalParams.asyncComponent) {\n    asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);\n  }\n\n  return router;\n}\n\nfunction modalRemove(modal) {\n  extend(modal, {\n    closeByRouter: true\n  });\n  modal.close();\n}\n\nexport { modalLoad, modalRemove };","map":{"version":3,"sources":["E:/Programming/React/rashiApp/node_modules/framework7/esm/modules/router/modal.js"],"names":["extend","nextTick","History","asyncComponent","modalLoad","modalType","route","loadOptions","direction","router","app","isPanel","modalOrPanel","options","animate","params","browserHistory","history","on","once","modalParams","modalRoute","routeCallback","modal","name","callback","modalOpen","panelOpen","modalClose","panelClose","modalClosed","panelClosed","onModalLoaded","create","modalInstance","hasEl","el","closeOnSwipeBack","close","removeThemeElements","$el","trigger","toLowerCase","emit","off","closeByRouter","back","modalComponent","f7Component","destroy","component","removeModal","push","view","id","url","browserHistoryRoot","browserHistorySeparator","currentRoute","reloadCurrent","saveHistory","open","undefined","loadModal","loadModalParams","loadModalOptions","content","componentUrl","resolve","contentEl","mount","componentEl","append","reject","allowPageChange","modalComponentLoader","rootEl","err","xhrAbortController","abort","xhrRequest","then","modalContent","catch","foundLoadProp","split","forEach","modalLoadProp","_loadModal","asyncResolve","resolveParams","resolveOptions","asyncReject","async","call","to","from","modalRemove"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,KAA9B,EAAqCC,WAArC,EAAkDC,SAAlD,EAA6D;AAC3D,MAAID,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAC1BA,IAAAA,WAAW,GAAG,EAAd;AACD;;AAED,MAAIE,MAAM,GAAG,IAAb;AACA,MAAIC,GAAG,GAAGD,MAAM,CAACC,GAAjB;AACA,MAAIC,OAAO,GAAGN,SAAS,KAAK,OAA5B;AACA,MAAIO,YAAY,GAAGD,OAAO,GAAG,OAAH,GAAa,OAAvC;AACA,MAAIE,OAAO,GAAGb,MAAM,CAAC;AACnBc,IAAAA,OAAO,EAAEL,MAAM,CAACM,MAAP,CAAcD,OADJ;AAEnBE,IAAAA,cAAc,EAAE,IAFG;AAGnBC,IAAAA,OAAO,EAAE,IAHU;AAInBC,IAAAA,EAAE,EAAE,EAJe;AAKnBC,IAAAA,IAAI,EAAE;AALa,GAAD,EAMjBZ,WANiB,CAApB;AAOA,MAAIa,WAAW,GAAGpB,MAAM,CAAC,EAAD,EAAKM,KAAK,CAACA,KAAN,CAAYD,SAAZ,CAAL,CAAxB;AACA,MAAIgB,UAAU,GAAGf,KAAK,CAACA,KAAvB;;AAEA,MAAIgB,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AACtD,QAAIN,EAAE,GAAGL,OAAO,CAACK,EAAjB;AAAA,QACIC,IAAI,GAAGN,OAAO,CAACM,IADnB;AAEA,QAAIM,QAAJ;;AAEA,QAAID,IAAI,KAAK,MAAb,EAAqB;AACnBC,MAAAA,QAAQ,GAAGP,EAAE,CAACQ,SAAH,IAAgBP,IAAI,CAACO,SAArB,IAAkCR,EAAE,CAACS,SAArC,IAAkDR,IAAI,CAACQ,SAAlE;AACD;;AAED,QAAIH,IAAI,KAAK,OAAb,EAAsB;AACpBC,MAAAA,QAAQ,GAAGP,EAAE,CAACU,UAAH,IAAiBT,IAAI,CAACS,UAAtB,IAAoCV,EAAE,CAACW,UAAvC,IAAqDV,IAAI,CAACU,UAArE;AACD;;AAED,QAAIL,IAAI,KAAK,QAAb,EAAuB;AACrBC,MAAAA,QAAQ,GAAGP,EAAE,CAACY,WAAH,IAAkBX,IAAI,CAACW,WAAvB,IAAsCZ,EAAE,CAACa,WAAzC,IAAwDZ,IAAI,CAACY,WAAxE;AACD;;AAED,QAAIN,QAAJ,EAAcA,QAAQ,CAACF,KAAD,CAAR;AACf,GAlBD;;AAoBA,WAASS,aAAT,GAAyB;AACvB;AACA,QAAIT,KAAK,GAAGb,GAAG,CAACL,SAAD,CAAH,CAAe4B,MAAf,CAAsBb,WAAtB,CAAZ;AACAC,IAAAA,UAAU,CAACa,aAAX,GAA2BX,KAA3B;AACA,QAAIY,KAAK,GAAGZ,KAAK,CAACa,EAAlB;;AAEA,aAASC,gBAAT,GAA4B;AAC1Bd,MAAAA,KAAK,CAACe,KAAN;AACD;;AAEDf,IAAAA,KAAK,CAACL,EAAN,CAASN,YAAY,GAAG,MAAxB,EAAgC,YAAY;AAC1C,UAAI,CAACuB,KAAL,EAAY;AACV;AACA1B,QAAAA,MAAM,CAAC8B,mBAAP,CAA2BhB,KAAK,CAACa,EAAjC,EAFU,CAE4B;;AAEtCb,QAAAA,KAAK,CAACiB,GAAN,CAAUC,OAAV,CAAkBpC,SAAS,CAACqC,WAAV,KAA0B,QAA1B,GAAqCrC,SAAS,CAACqC,WAAV,EAArC,GAA+D,UAAjF,EAA6FpC,KAA7F,EAAoGiB,KAApG;AACAd,QAAAA,MAAM,CAACkC,IAAP,CAAY,CAAC,CAAChC,OAAD,GAAW,WAAX,GAAyB,EAA1B,IAAgC,GAAhC,GAAsCN,SAAtC,GAAkD,OAAlD,GAA4DA,SAA5D,GAAwE,SAApF,EAA+FkB,KAAK,CAACa,EAArG,EAAyG9B,KAAzG,EAAgHiB,KAAhH;AACD;;AAEDd,MAAAA,MAAM,CAACU,IAAP,CAAY,eAAZ,EAA6BkB,gBAA7B;AACAf,MAAAA,aAAa,CAACC,KAAD,EAAQ,MAAR,CAAb;AACD,KAXD;AAYAA,IAAAA,KAAK,CAACL,EAAN,CAASN,YAAY,GAAG,OAAxB,EAAiC,YAAY;AAC3CH,MAAAA,MAAM,CAACmC,GAAP,CAAW,eAAX,EAA4BP,gBAA5B;;AAEA,UAAI,CAACd,KAAK,CAACsB,aAAX,EAA0B;AACxBpC,QAAAA,MAAM,CAACqC,IAAP;AACD;;AAEDxB,MAAAA,aAAa,CAACC,KAAD,EAAQ,OAAR,CAAb;AACD,KARD;AASAA,IAAAA,KAAK,CAACL,EAAN,CAASN,YAAY,GAAG,QAAxB,EAAkC,YAAY;AAC5CW,MAAAA,KAAK,CAACiB,GAAN,CAAUC,OAAV,CAAkBpC,SAAS,CAACqC,WAAV,KAA0B,eAA5C,EAA6DpC,KAA7D,EAAoEiB,KAApE;AACAA,MAAAA,KAAK,CAACoB,IAAN,CAAW,MAAM,CAAChC,OAAD,GAAW,oBAAX,GAAkC,EAAxC,IAA8CN,SAA9C,GAA0D,cAArE,EAAqFkB,KAAK,CAACa,EAA3F,EAA+F9B,KAA/F,EAAsGiB,KAAtG;AACA,UAAIwB,cAAc,GAAGxB,KAAK,CAACa,EAAN,CAASY,WAA9B;AACA1B,MAAAA,aAAa,CAACC,KAAD,EAAQ,QAAR,CAAb;;AAEA,UAAIwB,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACE,OAAf;AACD;;AAEDhD,MAAAA,QAAQ,CAAC,YAAY;AACnB,YAAI8C,cAAc,IAAI3B,WAAW,CAAC8B,SAAlC,EAA6C;AAC3CzC,UAAAA,MAAM,CAAC0C,WAAP,CAAmB5B,KAAK,CAACa,EAAzB;AACD;;AAEDb,QAAAA,KAAK,CAAC0B,OAAN;AACA,eAAO1B,KAAK,CAACjB,KAAb;AACA,eAAOe,UAAU,CAACa,aAAlB;AACD,OARO,CAAR;AASD,KAnBD;;AAqBA,QAAIrB,OAAO,CAACP,KAAZ,EAAmB;AACjB;AACA,UAAIG,MAAM,CAACM,MAAP,CAAcC,cAAd,IAAgCH,OAAO,CAACG,cAA5C,EAA4D;AAC1Dd,QAAAA,OAAO,CAACkD,IAAR,CAAa3C,MAAM,CAAC4C,IAAP,CAAYC,EAAzB,EAA6B;AAC3BC,UAAAA,GAAG,EAAE1C,OAAO,CAACP,KAAR,CAAciD,GADQ;AAE3BhC,UAAAA,KAAK,EAAElB;AAFoB,SAA7B,EAGG,CAACI,MAAM,CAACM,MAAP,CAAcyC,kBAAd,IAAoC,EAArC,IAA2C/C,MAAM,CAACM,MAAP,CAAc0C,uBAAzD,GAAmF5C,OAAO,CAACP,KAAR,CAAciD,GAHpG;AAID,OAPgB,CAOf;;;AAGF,UAAI1C,OAAO,CAACP,KAAR,KAAkBG,MAAM,CAACiD,YAA7B,EAA2C;AACzCnC,QAAAA,KAAK,CAACjB,KAAN,GAAcN,MAAM,CAACa,OAAO,CAACP,KAAT,EAAgB;AAClCiB,UAAAA,KAAK,EAAEA;AAD2B,SAAhB,CAApB;AAGAd,QAAAA,MAAM,CAACiD,YAAP,GAAsBnC,KAAK,CAACjB,KAA5B;AACD,OAfgB,CAef;;;AAGF,UAAIO,OAAO,CAACI,OAAR,IAAmB,CAACJ,OAAO,CAAC8C,aAAhC,EAA+C;AAC7ClD,QAAAA,MAAM,CAACQ,OAAP,CAAemC,IAAf,CAAoBvC,OAAO,CAACP,KAAR,CAAciD,GAAlC;AACA9C,QAAAA,MAAM,CAACmD,WAAP;AACD;AACF;;AAED,QAAIzB,KAAJ,EAAW;AACT;AACA1B,MAAAA,MAAM,CAAC8B,mBAAP,CAA2BhB,KAAK,CAACa,EAAjC,EAFS,CAE6B;;AAEtCb,MAAAA,KAAK,CAACiB,GAAN,CAAUC,OAAV,CAAkBpC,SAAS,CAACqC,WAAV,KAA0B,QAA1B,GAAqCrC,SAAS,CAACqC,WAAV,EAArC,GAA+D,UAAjF,EAA6FpC,KAA7F,EAAoGiB,KAApG;AACAd,MAAAA,MAAM,CAACkC,IAAP,CAAY/B,YAAY,GAAG,OAAf,GAAyBP,SAAzB,GAAqC,OAArC,GAA+CA,SAA/C,GAA2D,SAAvE,EAAkFkB,KAAK,CAACa,EAAxF,EAA4F9B,KAA5F,EAAmGiB,KAAnG;AACD,KAlFsB,CAkFrB;;;AAGFA,IAAAA,KAAK,CAACsC,IAAN,CAAWhD,OAAO,CAACC,OAAR,KAAoB,KAApB,IAA6BD,OAAO,CAACC,OAAR,KAAoB,IAAjD,GAAwDD,OAAO,CAACC,OAAhE,GAA0EgD,SAArF;AACD,GA7H0D,CA6HzD;;;AAGF,WAASC,SAAT,CAAmBC,eAAnB,EAAoCC,gBAApC,EAAsD;AACpD;AACA,QAAIV,GAAG,GAAGS,eAAe,CAACT,GAA1B;AAAA,QACIW,OAAO,GAAGF,eAAe,CAACE,OAD9B;AAAA,QAEIhB,SAAS,GAAGc,eAAe,CAACd,SAFhC;AAAA,QAGIiB,YAAY,GAAGH,eAAe,CAACG,YAHnC,CAFoD,CAKH;;AAEjD,aAASC,OAAT,CAAiBC,SAAjB,EAA4B;AAC1B,UAAIA,SAAJ,EAAe;AACb,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjCjD,UAAAA,WAAW,CAAC8C,OAAZ,GAAsBG,SAAtB;AACD,SAFD,MAEO,IAAIA,SAAS,CAACrB,WAAd,EAA2B;AAChCqB,UAAAA,SAAS,CAACrB,WAAV,CAAsBsB,KAAtB,CAA4B,UAAUC,WAAV,EAAuB;AACjDnD,YAAAA,WAAW,CAACgB,EAAZ,GAAiBmC,WAAjB;AACA7D,YAAAA,GAAG,CAAC8B,GAAJ,CAAQgC,MAAR,CAAeD,WAAf;AACD,WAHD;AAID,SALM,MAKA;AACLnD,UAAAA,WAAW,CAACgB,EAAZ,GAAiBiC,SAAjB;AACD;;AAEDrC,QAAAA,aAAa;AACd;AACF;;AAED,aAASyC,MAAT,GAAkB;AAChBhE,MAAAA,MAAM,CAACiE,eAAP,GAAyB,IAAzB;AACA,aAAOjE,MAAP;AACD;;AAED,QAAIyD,OAAJ,EAAa;AACXE,MAAAA,OAAO,CAACF,OAAD,CAAP;AACD,KAFD,MAEO,IAAIhB,SAAS,IAAIiB,YAAjB,EAA+B;AACpC;AACA,UAAI;AACF1D,QAAAA,MAAM,CAACkE,oBAAP,CAA4B;AAC1BC,UAAAA,MAAM,EAAElE,GAAG,CAAC0B,EADc;AAE1Bc,UAAAA,SAAS,EAAEA,SAFe;AAG1BiB,UAAAA,YAAY,EAAEA,YAHY;AAI1BtD,UAAAA,OAAO,EAAEoD,gBAJiB;AAK1BG,UAAAA,OAAO,EAAEA,OALiB;AAM1BK,UAAAA,MAAM,EAAEA;AANkB,SAA5B;AAQD,OATD,CASE,OAAOI,GAAP,EAAY;AACZpE,QAAAA,MAAM,CAACiE,eAAP,GAAyB,IAAzB;AACA,cAAMG,GAAN;AACD;AACF,KAfM,MAeA,IAAItB,GAAJ,EAAS;AACd;AACA,UAAI9C,MAAM,CAACqE,kBAAX,EAA+B;AAC7BrE,QAAAA,MAAM,CAACqE,kBAAP,CAA0BC,KAA1B;AACAtE,QAAAA,MAAM,CAACqE,kBAAP,GAA4B,KAA5B;AACD;;AAEDrE,MAAAA,MAAM,CAACuE,UAAP,CAAkBzB,GAAlB,EAAuBU,gBAAvB,EAAyCgB,IAAzC,CAA8C,UAAUC,YAAV,EAAwB;AACpE9D,QAAAA,WAAW,CAAC8C,OAAZ,GAAsBgB,YAAtB;AACAlD,QAAAA,aAAa;AACd,OAHD,EAGGmD,KAHH,CAGS,YAAY;AACnB1E,QAAAA,MAAM,CAACiE,eAAP,GAAyB,IAAzB;AACD,OALD;AAMD,KAbM,MAaA;AACL1C,MAAAA,aAAa;AACd;AACF;;AAED,MAAIoD,aAAJ;AACA,mDAAiDC,KAAjD,CAAuD,GAAvD,EAA4DC,OAA5D,CAAoE,UAAUC,aAAV,EAAyB;AAC3F,QAAInE,WAAW,CAACmE,aAAD,CAAX,IAA8B,CAACH,aAAnC,EAAkD;AAChD,UAAII,UAAJ;;AAEAJ,MAAAA,aAAa,GAAG,IAAhB;AACArB,MAAAA,SAAS,EAAEyB,UAAU,GAAG,EAAb,EAAiBA,UAAU,CAACD,aAAD,CAAV,GAA4BnE,WAAW,CAACmE,aAAD,CAAxD,EAAyEC,UAA3E,GAAwF3E,OAAxF,CAAT;AACD;AACF,GAPD;;AASA,MAAI,CAACuE,aAAD,IAAkB/E,SAAS,KAAK,SAApC,EAA+C;AAC7C2B,IAAAA,aAAa;AACd,GA5M0D,CA4MzD;;;AAGF,WAASyD,YAAT,CAAsBC,aAAtB,EAAqCC,cAArC,EAAqD;AACnD5B,IAAAA,SAAS,CAAC2B,aAAD,EAAgB1F,MAAM,CAACa,OAAD,EAAU8E,cAAV,CAAtB,CAAT;AACD;;AAED,WAASC,WAAT,GAAuB;AACrBnF,IAAAA,MAAM,CAACiE,eAAP,GAAyB,IAAzB;AACD;;AAED,MAAItD,WAAW,CAACyE,KAAhB,EAAuB;AACrBzE,IAAAA,WAAW,CAACyE,KAAZ,CAAkBC,IAAlB,CAAuBrF,MAAvB,EAA+B;AAC7BA,MAAAA,MAAM,EAAEA,MADqB;AAE7BsF,MAAAA,EAAE,EAAElF,OAAO,CAACP,KAFiB;AAG7B0F,MAAAA,IAAI,EAAEvF,MAAM,CAACiD,YAHgB;AAI7BU,MAAAA,OAAO,EAAEqB,YAJoB;AAK7BhB,MAAAA,MAAM,EAAEmB,WALqB;AAM7BpF,MAAAA,SAAS,EAAEA,SANkB;AAO7BE,MAAAA,GAAG,EAAEA;AAPwB,KAA/B;AASD;;AAED,MAAIU,WAAW,CAACjB,cAAhB,EAAgC;AAC9BA,IAAAA,cAAc,CAACM,MAAD,EAASW,WAAW,CAACjB,cAArB,EAAqCsF,YAArC,EAAmDG,WAAnD,CAAd;AACD;;AAED,SAAOnF,MAAP;AACD;;AAED,SAASwF,WAAT,CAAqB1E,KAArB,EAA4B;AAC1BvB,EAAAA,MAAM,CAACuB,KAAD,EAAQ;AACZsB,IAAAA,aAAa,EAAE;AADH,GAAR,CAAN;AAGAtB,EAAAA,KAAK,CAACe,KAAN;AACD;;AAED,SAASlC,SAAT,EAAoB6F,WAApB","sourcesContent":["import { extend, nextTick } from '../../shared/utils';\nimport History from '../../shared/history';\nimport asyncComponent from './async-component';\n\nfunction modalLoad(modalType, route, loadOptions, direction) {\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n\n  var router = this;\n  var app = router.app;\n  var isPanel = modalType === 'panel';\n  var modalOrPanel = isPanel ? 'panel' : 'modal';\n  var options = extend({\n    animate: router.params.animate,\n    browserHistory: true,\n    history: true,\n    on: {},\n    once: {}\n  }, loadOptions);\n  var modalParams = extend({}, route.route[modalType]);\n  var modalRoute = route.route;\n\n  var routeCallback = function routeCallback(modal, name) {\n    var on = options.on,\n        once = options.once;\n    var callback;\n\n    if (name === 'open') {\n      callback = on.modalOpen || once.modalOpen || on.panelOpen || once.panelOpen;\n    }\n\n    if (name === 'close') {\n      callback = on.modalClose || once.modalClose || on.panelClose || once.panelClose;\n    }\n\n    if (name === 'closed') {\n      callback = on.modalClosed || once.modalClosed || on.panelClosed || once.panelClosed;\n    }\n\n    if (callback) callback(modal);\n  };\n\n  function onModalLoaded() {\n    // Create Modal\n    var modal = app[modalType].create(modalParams);\n    modalRoute.modalInstance = modal;\n    var hasEl = modal.el;\n\n    function closeOnSwipeBack() {\n      modal.close();\n    }\n\n    modal.on(modalOrPanel + \"Open\", function () {\n      if (!hasEl) {\n        // Remove theme elements\n        router.removeThemeElements(modal.el); // Emit events\n\n        modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n        router.emit((!isPanel ? 'modalInit' : '') + \" \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n      }\n\n      router.once('swipeBackMove', closeOnSwipeBack);\n      routeCallback(modal, 'open');\n    });\n    modal.on(modalOrPanel + \"Close\", function () {\n      router.off('swipeBackMove', closeOnSwipeBack);\n\n      if (!modal.closeByRouter) {\n        router.back();\n      }\n\n      routeCallback(modal, 'close');\n    });\n    modal.on(modalOrPanel + \"Closed\", function () {\n      modal.$el.trigger(modalType.toLowerCase() + \":beforeremove\", route, modal);\n      modal.emit(\"\" + (!isPanel ? 'modalBeforeRemove ' : '') + modalType + \"BeforeRemove\", modal.el, route, modal);\n      var modalComponent = modal.el.f7Component;\n      routeCallback(modal, 'closed');\n\n      if (modalComponent) {\n        modalComponent.destroy();\n      }\n\n      nextTick(function () {\n        if (modalComponent || modalParams.component) {\n          router.removeModal(modal.el);\n        }\n\n        modal.destroy();\n        delete modal.route;\n        delete modalRoute.modalInstance;\n      });\n    });\n\n    if (options.route) {\n      // Update Browser History\n      if (router.params.browserHistory && options.browserHistory) {\n        History.push(router.view.id, {\n          url: options.route.url,\n          modal: modalType\n        }, (router.params.browserHistoryRoot || '') + router.params.browserHistorySeparator + options.route.url);\n      } // Set Route\n\n\n      if (options.route !== router.currentRoute) {\n        modal.route = extend(options.route, {\n          modal: modal\n        });\n        router.currentRoute = modal.route;\n      } // Update Router History\n\n\n      if (options.history && !options.reloadCurrent) {\n        router.history.push(options.route.url);\n        router.saveHistory();\n      }\n    }\n\n    if (hasEl) {\n      // Remove theme elements\n      router.removeThemeElements(modal.el); // Emit events\n\n      modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n      router.emit(modalOrPanel + \"Init \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n    } // Open\n\n\n    modal.open(options.animate === false || options.animate === true ? options.animate : undefined);\n  } // Load Modal Content\n\n\n  function loadModal(loadModalParams, loadModalOptions) {\n    // Load Modal Props\n    var url = loadModalParams.url,\n        content = loadModalParams.content,\n        component = loadModalParams.component,\n        componentUrl = loadModalParams.componentUrl; // Component/Template Callbacks\n\n    function resolve(contentEl) {\n      if (contentEl) {\n        if (typeof contentEl === 'string') {\n          modalParams.content = contentEl;\n        } else if (contentEl.f7Component) {\n          contentEl.f7Component.mount(function (componentEl) {\n            modalParams.el = componentEl;\n            app.$el.append(componentEl);\n          });\n        } else {\n          modalParams.el = contentEl;\n        }\n\n        onModalLoaded();\n      }\n    }\n\n    function reject() {\n      router.allowPageChange = true;\n      return router;\n    }\n\n    if (content) {\n      resolve(content);\n    } else if (component || componentUrl) {\n      // Load from component (F7/Vue/React/...)\n      try {\n        router.modalComponentLoader({\n          rootEl: app.el,\n          component: component,\n          componentUrl: componentUrl,\n          options: loadModalOptions,\n          resolve: resolve,\n          reject: reject\n        });\n      } catch (err) {\n        router.allowPageChange = true;\n        throw err;\n      }\n    } else if (url) {\n      // Load using XHR\n      if (router.xhrAbortController) {\n        router.xhrAbortController.abort();\n        router.xhrAbortController = false;\n      }\n\n      router.xhrRequest(url, loadModalOptions).then(function (modalContent) {\n        modalParams.content = modalContent;\n        onModalLoaded();\n      }).catch(function () {\n        router.allowPageChange = true;\n      });\n    } else {\n      onModalLoaded();\n    }\n  }\n\n  var foundLoadProp;\n  'url content component el componentUrl template'.split(' ').forEach(function (modalLoadProp) {\n    if (modalParams[modalLoadProp] && !foundLoadProp) {\n      var _loadModal;\n\n      foundLoadProp = true;\n      loadModal((_loadModal = {}, _loadModal[modalLoadProp] = modalParams[modalLoadProp], _loadModal), options);\n    }\n  });\n\n  if (!foundLoadProp && modalType === 'actions') {\n    onModalLoaded();\n  } // Async\n\n\n  function asyncResolve(resolveParams, resolveOptions) {\n    loadModal(resolveParams, extend(options, resolveOptions));\n  }\n\n  function asyncReject() {\n    router.allowPageChange = true;\n  }\n\n  if (modalParams.async) {\n    modalParams.async.call(router, {\n      router: router,\n      to: options.route,\n      from: router.currentRoute,\n      resolve: asyncResolve,\n      reject: asyncReject,\n      direction: direction,\n      app: app\n    });\n  }\n\n  if (modalParams.asyncComponent) {\n    asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);\n  }\n\n  return router;\n}\n\nfunction modalRemove(modal) {\n  extend(modal, {\n    closeByRouter: true\n  });\n  modal.close();\n}\n\nexport { modalLoad, modalRemove };"]},"metadata":{},"sourceType":"module"}